{
	"patcher" : 	{
		"fileversion" : 1,
		"appversion" : 		{
			"major" : 9,
			"minor" : 0,
			"revision" : 8,
			"architecture" : "x64",
			"modernui" : 1
		}
,
		"classnamespace" : "dsp.gen",
		"rect" : [ 34.0, 85.0, 953.0, 859.0 ],
		"gridsize" : [ 15.0, 15.0 ],
		"boxes" : [ 			{
				"box" : 				{
					"id" : "obj-6",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 892.0, 799.0, 35.0, 22.0 ],
					"text" : "out 5"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-5",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 681.5, 799.0, 35.0, 22.0 ],
					"text" : "out 4"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-14",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 471.0, 799.0, 37.0, 22.0 ],
					"text" : "out 3"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-9",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 260.5, 804.0, 36.0, 22.0 ],
					"text" : "out 2"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-1",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 50.0, 14.0, 348.0, 22.0 ],
					"text" : "in 1 @comment \"note messages and listen input from oscillator\""
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-2",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 893.0, 9.0, 151.0, 22.0 ],
					"text" : "in 2 @comment \"FM input\""
				}

			}
, 			{
				"box" : 				{
					"code" : "//in1 is listen input\r\n//in2 is fm input\r\n\r\n\r\nlores(input,freq){ //lores but with a fixed resonance (to prevent extra zero x-ings happening)\r\nHistory y2(0);\nHistory y1(0);\nexpr_1 = ((((freq * 2)) * PI)) / samplerate;\nfloat_2 = float(0.939413);\nmul_3 = float_2 * float_2;\nmul_4 = mul_3 * y2;\ncos_5 = cos(expr_1);\nmul_6 = cos_5 * float_2;\nmul_7 = mul_6 * -2;\nmul_8 = mul_7 * y1;\nadd_9 = ((mul_3 + mul_7)) + 1;\nmul_10 = input * add_9;\nsub_11 = mul_10 - ((mul_4 + mul_8));\ny2_next_12 = fixdenorm(y1);\ny1_next_13 = fixdenorm(sub_11);\ny2 = y2_next_12;\ny1 = y1_next_13;\r\nreturn sub_11;\n}\r\n\r\ngetinterval(f1,f2){\r\n\tr=f1/f2;\r\n\ti=log(r)/log(2);\r\n\treturn i;\r\n}\r\n\r\nBuffer mtof_lookup(\"mtof_lookup\");\r\n\r\nHistory tunerstate(0);\r\nHistory o_n(0); //old_note\r\nHistory v_out(0);\r\nHistory f_out(0);\r\nHistory frequency(0);\r\nHistory rate(37);\r\nHistory errorvalue(0);\r\nHistory fakeosc(0);\r\nHistory offset(-0.160);\r\n\r\n\r\nParam note(0,min=0,default=0,max=128);\r\nParam auto(1,min=0,default=1,max=1);\r\nParam total_latency(0,min=0,default=393,max=999999); //RME on 128 =393 //ES8 128/low = 545 samples\r\nParam slope(0.527773, min=0.000001,default=0.52624, max=2);\r\nParam voiceis(0);\r\n\r\nDelay d_out(2048);\r\nDelay d_in(2048);\r\n\r\no_n = (note-64)/64 +in2;  //X-axis runs from -1 to 1 \r\n\r\n//fakeosc: follows real one, simulating the latency so it matches exactly.\r\nd_out.write(f_out);\r\nfakeosc_nodelay=phasor(d_out.read(total_latency/2))-0.5;\r\nd_in.write(fakeosc_nodelay);\r\nfakeosc = d_in.read(total_latency/2);\r\n\r\nv_out=offset + slope * o_n;\r\nf_out=peek(mtof_lookup,note+64*in2, voiceis);//voice % 8); //mtof(note+ 64*in2);\r\n\r\nrate = 2+(max((note-48)/8,1)); \r\n\r\nt2=lores(in1,f_out)>0;\r\nft2=lores(fakeosc, f_out)>0;\r\n\r\nerrorvalue+=abs(change(t2))-abs(change(ft2)); //so if you're sharp this is +ve\r\n\r\nif(delta(note)!=0){\r\n\ttunerstate=-total_latency-2;\r\n}\r\nif(delta(auto)) tunerstate = -total_latency;\r\n\r\nif(tunerstate<0){\r\n\ttunerstate+=auto; //<<<<< if auto is off it never switches out of wait state\r\n\terrorvalue=0;\r\n\t // if you want it to do partials then move this to next block (because you want it to do partials after waiting)\r\n}else{\r\n\tif(tunerstate==0){\r\n\t\tif(abs(errorvalue)>=1){\r\n\t\t\ttunerstate=1;\r\n\t\t}\r\n\t}else{\r\n\t\ttunerstate+=1;\r\n\t\tif(abs(errorvalue)>=1+rate){\r\n\t\t\t//you've gained/lost this many cycles vs the fake one, in 'tunerstate' samples\r\n\t\t\t//so in 1 sec you'd gain/lose rate*samplerate/tunerstate cycles, so freq estimate is\r\n\t\t\t//f_out+this\r\n\t\t\tdiff=0.5*rate*samplerate/tunerstate;\r\n\t\t\tif(abs(diff)>f_out) diff=f_out/2;\r\n\t\t\tif(errorvalue>0){\r\n\t\t\t\tfrequency = f_out + diff;\r\n\t\t\t}else{\r\n\t\t\t\tfrequency = f_out - diff;\t\t\t\t\r\n\t\t\t}\r\n\t\t\tf_n = (ftom(frequency)-64)/64;\r\n\t\t\t\r\n\t\t\tinterval = getinterval(frequency,f_out);\r\n\t\t\tdv=interval * slope * -0.031;\r\n\t\t\t\t\t\t\t\r\n\t\t\tv_out+=dv;\r\n\t\t\tto = v_out - slope * (ftom(frequency)-64)/64;\r\n\t\t\tif(abs(to)<1) offset=to;\r\n\t\t\terrorvalue=0;\r\n\t\t\ttunerstate=-10;//so often, due to the wobblyness of the real osc, errorvalue oscillates a bit on\r\n\t\t\t//every change - ie 00000010101011111111121212122222222 - this little wait lets it settle so we count\r\n\t\t\t//the next real movement rather than the wobbles associated with the movement that just happened.\r\n\t\t\tif(abs(v_out)>1) { //terrible error condition, i'm not angry i'm just disappointed. reset.\r\n\t\t\t\tv_out=0;\r\n\t\t\t\ttunerstate=-total_latency;\r\n\t\t\t\to_n=-99;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nout1 = v_out;\r\nout2 = errorvalue;\r\nout3 = frequency;\r\nout4 = offset;\r\nout5 = fakeosc_nodelay;",
					"fontface" : 0,
					"fontname" : "<Monospaced>",
					"fontsize" : 12.0,
					"id" : "obj-3",
					"maxclass" : "codebox",
					"numinlets" : 2,
					"numoutlets" : 5,
					"outlettype" : [ "", "", "", "", "" ],
					"patching_rect" : [ 50.0, 38.0, 861.0, 754.0 ]
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-4",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 49.0, 804.0, 35.0, 22.0 ],
					"text" : "out 1"
				}

			}
 ],
		"lines" : [ 			{
				"patchline" : 				{
					"destination" : [ "obj-3", 0 ],
					"source" : [ "obj-1", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-3", 1 ],
					"source" : [ "obj-2", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-14", 0 ],
					"source" : [ "obj-3", 2 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-4", 0 ],
					"source" : [ "obj-3", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-5", 0 ],
					"source" : [ "obj-3", 3 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-6", 0 ],
					"source" : [ "obj-3", 4 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-9", 0 ],
					"source" : [ "obj-3", 1 ]
				}

			}
 ]
	}

}
